% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MIGSAres-common.R
\docType{methods}
\name{MIGSAres-common}
\alias{$,MIGSAres-method}
\alias{MIGSAres-common}
\alias{[,MIGSAres,ANY,ANY,ANY-method}
\alias{as.data.frame,MIGSAres}
\alias{as.data.frame,MIGSAres-method}
\alias{colnames,MIGSAres}
\alias{colnames,MIGSAres-method}
\alias{dim,MIGSAres-method}
\alias{head,MIGSAres}
\alias{head,MIGSAres-method}
\alias{merge,MIGSAres,MIGSAres}
\alias{merge,MIGSAres,MIGSAres-method}
\alias{show,MIGSAres}
\alias{show,MIGSAres-method}
\alias{summary,MIGSAres}
\alias{summary,MIGSAres-method}
\alias{tail,MIGSAres}
\alias{tail,MIGSAres-method}
\title{MIGSAres exploratory functions}
\usage{
\S4method{dim}{MIGSAres}(x)

\S4method{$}{MIGSAres}(x, name)

\S4method{colnames}{MIGSAres}(x)

\S4method{head}{MIGSAres}(x, n = 6L)

\S4method{tail}{MIGSAres}(x, n = 6L)

\S4method{[}{MIGSAres,ANY,ANY,ANY}(x, i, j, drop = FALSE)

\S4method{summary}{MIGSAres}(object)

\S4method{show}{MIGSAres}(object)

\S4method{as.data.frame}{MIGSAres}(x)

\S4method{merge}{MIGSAres,MIGSAres}(x, y)
}
\arguments{
\item{x}{MIGSAres object.}

\item{name}{as used in \code{\link[base]{$}}.}

\item{n}{as used in \code{\link[utils]{head}} and \code{\link[utils]{tail}}.}

\item{i}{as used in \code{\link[base]{[}}.}

\item{j}{as used in \code{\link[base]{[}}.}

\item{drop}{as used in \code{\link[base]{[}} (default: FALSE).}

\item{object}{MIGSAres object.}

\item{y}{MIGSAres object.}
}
\value{
desired object.
}
\description{
Several R base overwritten functions to manipulate a MIGSAres object as a 
data.frame way.
NOTE: When subsetting a MIGSAres object, if it does not have the id, GS_Name 
and (at least) one experiment columns, then it will stop being a MIGSAres 
object, i.e., migsaRes[,c("id","igsaInput1")] is no longer a MIGSAres object.
}
\examples{
data(migsaRes);
## As we ran MIGSA for two experiments and 200 gene sets, it must have 200 
## rows, and five columns (id, Name, GS_Name, and the experiments names).
dim(migsaRes);

data(migsaRes);
## migsaRes shown as data.frame has these column names: id, Name, GS_Name, 
## and the experiments names. As we ran two experiments, names igsaInput1 
## and igsaInput2, we can use $ in these ways:
head(migsaRes$id);
table(migsaRes$Name);
table(migsaRes$GS_Name);
head(migsaRes$igsaInput1);
head(migsaRes$igsaInput2);

data(migsaRes);
colnames(migsaRes);

data(migsaRes);
head(migsaRes);

## Or see the first 10
head(migsaRes, n=10);

data(migsaRes);
tail(migsaRes);

## Or see the first 10
tail(migsaRes, n=10);

data(migsaRes);
## migsaRes shown as data.frame has these column names: id, Name, GS_Name, 
## and the experiments names. As we ran two experiments, names igsaInput1 
## and igsaInput2, we can use [ in these ways:

## Lets get the first 5 rows and 4 columns (the result is a MIGSAres object).
migsaRes[1:5, 1:4];
class(migsaRes[1:5, 1:4]);

## Lets get the experiments results. Note that this is not any more a 
## MIGSAres object.
migsaRes[, c("igsaInput1", "igsaInput2")];
class(migsaRes[, c("igsaInput1", "igsaInput2")]);

data(migsaRes);

### As enrichment cutoff is not set then we will get for each experiment the 
### number of enriched gene sets at different cutoff values.
summary(migsaRes);

### Lets set the enrichment cutoff at 0.01
migsaResWCoff <- setEnrCutoff(migsaRes, 0.01);

### Now as summary we will get the number of enriched gene sets per 
### experiment and their intersections.
summary(migsaResWCoff);

data(migsaRes);

migsaRes;

data(migsaRes);

migsaResDFrame <- as.data.frame(migsaRes);

data(migsaRes);

migsaRes1 <- migsaRes[,1:4];
migsaRes2 <- migsaRes[,c(1:3,5)];
migsaResMerged <- merge(migsaRes1, migsaRes2);

}

