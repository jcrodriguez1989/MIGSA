% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MIGSAinput-class.R
\docType{methods}
\name{MIGSAinput-class}
\alias{MIGSAinput}
\alias{MIGSAinput-class}
\title{MIGSAinput S4 class implementation in R}
\description{
This S4 class contains all the necessary inputs to execute a MIGSA.
}
\section{Slots}{

\describe{
\item{\code{experiments}}{list of IGSAinput objects to execute.}

\item{\code{gene_sets_list}}{list of Genesets to be tested for enrichment. 
If set in MIGSAinput class then it will be tested in every IGSAinput.}

\item{\code{bp_param}}{(optional) BiocParallelParam to execute MIGSA 
in parallel.}
}}
\examples{
## Lets create a basic MIGSAinput object with two IGSAinput objects.
## These two IGSAinput objects will be identical except for their ExprData.

## First create an expression matrix.
maData1 <- matrix(rnorm(10000),ncol=4);
rownames(maData1) <- 1:nrow(maData1); # It must have rownames (gene names).
maExprData1 <- new("MAList",list(M=maData1));

maData2 <- matrix(rnorm(10000),ncol=4);
rownames(maData2) <- 1:nrow(maData2); # It must have rownames (gene names).
maExprData2 <- new("MAList",list(M=maData2));

## Now lets create the FitOptions object.
myFOpts <- FitOptions(c("Cond1", "Cond1", "Cond2", "Cond2"));

## Lets create the Genesets to test for enrichment.
myGs1 <- Geneset(id="fakeId1", name="fakeName1", genes=as.character(1:10));
myGs2 <- Geneset(id="fakeId2", name="fakeName2", genes=as.character(7:15));
myGSs <- Genesets(name="myGenesets", gene_sets=list(myGs1, myGs2),
is_GO=FALSE);

## Lets create our IGSAinputs ready for MIGSA.
myIgsaInput1 <- IGSAinput(name="myIgsaInput1", expr_data=maExprData1, 
fit_options=myFOpts, gene_sets_list=list(myGSs));

myIgsaInput2 <- IGSAinput(name="myIgsaInput2", expr_data=maExprData2, 
fit_options=myFOpts, gene_sets_list=list(myGSs));

## Finally lets create out MIGSAinput object.
myMigsaInput <- MIGSAinput(experiments=list(myIgsaInput1, myIgsaInput2));

}

